# Possible reviewers that I know personally include:
# - Chris Fields
# - Denis Baurain
# - Daisie Huang
# In addition, there are people that appear to be users but that I don't know:
# - Hayward, Alexander 
# - Jern, Patric
# The general idea here is that these are people I haven't published with (yet).
# The BioPerl people's page provides a murderer's row of other candidates, though
# quite a few I already have published with, so there's a potential for COI.
# Here's the list: https://github.com/orgs/bioperl/people
# Also, all people on the previous publication, or people that have since 
# been added to the Acknowledgements in the README.md are obviously out.

=pod

=head1 The Bio::Phylo libraries for phylogenetic data analysis, version 2.0

=over

=item Rutger A. Vos1

=item Hannes Hettling1

1. Naturalis Biodiversity Center, Leiden, the Netherlands

=back

=head2 Abstract

=head2 Introduction

=head2 Overview

The Bio::Phylo libraries are designed around the notion that phylogenetic data can be modeled as consisting of 
the properties of, and relationships between, objects from a limited number of classes. These classes are things
such as phylogenetic trees, the tree nodes in them, and the taxa that terminal tree nodes represent; or the 
characters of character state matrices, and the character state sequences in them. Bio::Phylo provides the 
functionality to create these objects from scratch, or to read them from various data sources, or to 
simulate them; and, subsequently, to transform them, perform calculations on them, and to report the results of 
these operations by exporting data in various formats or by visualizing them. As such, the Bio::Phylo libraries
form a modular toolkit whose components are used in anything from quick scripts, e.g. to process some data 
as part of a larger analysis (numerous publications cite this usage, some high-impact ones among these include
[hayward2015pan], [hayward2013broad] and [de2013convergent]), to larger applications, such as the SUPERSMART 
pipeline [Antonelli10092016] or the Monophylizer [Mutanen01112016] web service. In addition, other libraries 
for bioinformatics and computational biology depend on Bio::Phylo in order to re-use some of its functionality. 
The most widely-used and well-known of these is BioPerl [stajich2002bioperl], which uses Bio::Phylo for 
reading and writing NeXML [vos2012nexml] data. Despite these different usage patterns, some specific applications
can be identified for which Bio::Phylo is particularly well suited. These are briefly discussed in the following 
sections, with emphasis on the new features provided in version 2.0.

=head3 Data management

The Bio::Phylo API models a number of relationships between different classes of data objects. For example, a 
phylogenetic tree has zero or more nodes in it, and, conversely, a node belongs at most to a single tree. These 
relationships, which can be termed "has-a" and "has-many" relationships, have been exhaustively described previously 
(see [Vos2011] and Figure 1 therein) and have not changed in version 2.0. In addition, the API models relationships 
between classes of objects in terms of their inheritance from one another, i.e. "is-a" relationships. In the new 
API, these latter relationships have subtly changed, although this does not affect the behavior experienced by 
users of the toolkit. These changes are discussed in the section on L<Internal design>.

=over

=item instantiating objects standalone, using factory, from files

=item exporting objects to text files

=back

=head3 NeXML management

=over

=item NeXML description

=item semantic annotations

=item other representations of NeXML: RDF and JSON

=item additional dependencies

=back

=head3 Visualization

=over

=item cladograms versus phylograms

=item projections: rectangular, unrooted, radial

=item extra annotations: collapsed clades, clade labels, pie charts

=item additional dependencies

=back

=head3 Simulation

=over

=item basic tree simulation and evolutionary models

=item simulation of expected waiting times

=item simulating sequence data

=back

=head3 Web services

=over

=item clients

=item services

=item PhyloWS

=item BioVeL

=item Monophylizer, NeXML website

=back

=head3 Compiled extensions

=over

=item Bio::Phylo::XS

=back

=head3 Likelihood calculations

=over

=item Beagle

=item PLL

=back

=head3 Database mappings

=over

=item Bio::Phylo::Megatree

=back

=head2 Internal design

=over

=item Semantic annotations

=item "Roles"

=item Meta-Object Programming

=back

=head2 Installation

Bio::Phylo can be installed automatically by a number of different package managers. However,
these usually rely on outdated versions, and because there is nothing that needs to be
compiled for the core installation there is no need to let a package manager do a system
wide installation, which is typically only useful for packages that include compiled
binaries and not just pure Perl source code. Bio::Phylo is pure Perl, so it is recommended 
to have the project's directory tree "cloned" from the source code repository 
(see Availability), and have the C<PERL5LIB> environment variable point to the C<lib> 
folder inside the directory tree. This way all functionality will be available in user 
scripts, and the user can update to the latest release (or skip back to any previous one) 
with a single command. Source code can be cloned from code repositories using the 
L<git|http://git-scm.org> tool on most common operating systems, it is outside of the scope 
of this document to discuss how this is done: good documentation for C<git> can be found 
L<online|https://help.github.com/articles/cloning-a-repository/>. How to update an 
environment variable to add an additional location to it, on any particular operating 
system, is likewise best searched for online.

Although this is not the recommended way to install, Bio::Phylo is also available from CPAN, 
which means that any tools built around this system will be able to install the latest 
release, for example using the standard command line program C<cpan>, which is installed 
on almost any computer that has C<perl> installed. Installation from CPAN is typically the 
approach taken by a system administrator on high-performance computing infrastructure. 
Experienced Perl users commonly install the non-standard package management tool C<cpanm> 
(CPAN-minus, a play on the name of a previous tool called CPAN-plus), which is somewhat more 
user friendly, and it can install modules directly from GitHub (but then it will do a 
system-wide install that from that moment on cannot be updated from GitHub, so it is still 
better to check out the code as described above). Certain installations of Perl (historically, 
on Windows) include a package manager called C<ppm>. While this is very useful for hard-to-
install compiled extensions, this too relies on old versions of Bio::Phylo, so is best 
avoided, as are Linux-based package managers, such as C<apt-get> and C<yum>.

=head2 Availability

All revisions of the source code are available from the source code repository at
L<http://github.com/rvosa/bio-phylo>. The latest stable release version, which is usually 
considerably far behind the latest source code revision, is available from the Comprehensive
Perl Archive Network (CPAN) at L<http://search.cpan.org/dist/Bio-Phylo>. Accompanying this
publication is a uniquely identifiable release, stamped with a Digital Object
Identifier (DOI) issued by L<Zenodo.org>: C<doi:10.5281/zenodo.tbd>.

As is a common convention in Perl software releases, a dual licensing scheme applies to
Bio::Phylo - both the L<Artistic License|https://github.com/rvosa/bio-phylo/blob/master/COPYING>
as well as the L<GNU General Public License|https://github.com/rvosa/bio-phylo/blob/master/LICENSE>
applies. This is generally interpreted to mean that you are free to choose whichever of these
licenses fits best with your own project, should you want to reuse all (or part) of Bio::Phylo.
This is certainly the spirit: feel free to use these libraries however you see fit. 
No warranties.

=head2 Community

=head2 Glossary

=head2 Acknowledgements

=head2 References
